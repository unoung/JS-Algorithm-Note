//탐욕법(greedy)

/* 
- 문제 설명
무인도에 갇힌 사람들을 구명보트를 이용하여 구출하려고 합니다. 구명보트는 작아서 한 번에 최대 2명씩 밖에 탈 수 없고, 무게 제한도 있습니다.

예를 들어, 사람들의 몸무게가 [70kg, 50kg, 80kg, 50kg]이고 구명보트의 무게 제한이 100kg이라면 2번째 사람과 4번째 사람은 같이 탈 수 있지만 1번째 사람과 3번째 사람의 무게의 합은 150kg이므로 구명보트의 무게 제한을 초과하여 같이 탈 수 없습니다.

구명보트를 최대한 적게 사용하여 모든 사람을 구출하려고 합니다.

사람들의 몸무게를 담은 배열 people과 구명보트의 무게 제한 limit가 매개변수로 주어질 때, 모든 사람을 구출하기 위해 필요한 구명보트 개수의 최솟값을 return 하도록 solution 함수를 작성해주세요.

- 제한사항
무인도에 갇힌 사람은 1명 이상 50,000명 이하입니다.
각 사람의 몸무게는 40kg 이상 240kg 이하입니다.
구명보트의 무게 제한은 40kg 이상 240kg 이하입니다.
구명보트의 무게 제한은 항상 사람들의 몸무게 중 최댓값보다 크게 주어지므로 사람들을 구출할 수 없는 경우는 없습니다.

- 입출력 예
people	                limit	    return
[70, 50, 80, 50]	    100	        3
[70, 80, 50]	        100	        3 
*/

//풀이
function solution(people, limit) {
    var answer =0;
    people.sort ((a,b) => b-a);
    
    for (var i=0, j= people.length - 1; i <=j ; i++ ) {
        if (people[i] + people [j] <= limit )
            j--
        answer ++
    }
    
    return answer;
}

/* 
구명보트가 작아서 최대 2명씩 밖에 탈 수 없기 때문에 가장 많이 탈 수 있는 방법은 가장 무거운 사람과 가장 가벼운 사람이 타는 방법 뿐일 것입니다.

그러므로 무게 순으로 정렬시킨 다음,

가장 무거운 사람과 가장 가벼운 사람의 무게 합이 무게 제한 보다 낮으면 두 사람이 빠지고 구명보트 개수를 추가하고,

그렇지 않으면 가장 무거운 사람만 빠지고 구명보트 개수를 추가하면 됩니다.

이 과정을 반복한 뒤 추가된 구명보트의 총 개수를 반환합니다.

*/

//풀이 2
function solution(people, limit) {
    // 사람들을 몸무게 순으로 정렬합니다.
    people.sort((a, b) => a - b);
  
    let count = 0; // 필요한 구명보트 개수를 세는 변수
    let left = 0; // 배열의 왼쪽 인덱스를 가리키는 변수
    let right = people.length - 1; // 배열의 오른쪽 인덱스를 가리키는 변수
  
    while (left <= right) {
      // 가장 가벼운 사람과 무거운 사람을 합쳤을 때 무게 제한을 넘지 않는 경우
      if (people[left] + people[right] <= limit) {
        left++; // 가장 가벼운 사람은 구명보트에 탑승시킵니다.
      }
      right--; // 가장 무거운 사람은 구명보트에 탑승시킵니다.
      count++; // 구명보트 개수를 증가시킵니다.
    }
  
    return count;
  }
  
